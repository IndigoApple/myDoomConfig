;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(projectile-add-known-project "C:/Users/vincli/AppData/Roaming/org")
(setq projectile-project-search-path '("C:/Users/vincli/Documents/work")
      projectile-auto-discover nil)

;; Key Mappings
(map! (:leader
       ;; Adding bindings to the "Open" subsection
       (:prefix "o"
        :desc   "Treemacs"              :nv "t" #'treemacs
        :desc   "Project eshell"        :nv "e" #'switch-to-project-eshell-else-create
        )
       (:prefix ("l" . "lsp")
        :desc   "Run lsp"               :nv "l" #'lsp
        :desc   "Format Buffer"         :nv "f" #'lsp-format-buffer))
      ;; Adding hydra window resize/nav to C-w C-; or SPC w C-;
      (:map evil-window-map
       "C-;" #'+hydra/window-nav/body)
      ;; Map csg in evil normal state map to project search
      (:map evil-normal-state-map
       "C-S-f" #'+ivy/project-search)
      ;; Unbind browse things in magit-mode map to enable eyebrowse
      (:map magit-mode-map
       "C-c C-w" #'nil))
;; Swapping eyebrowse prefix to C-a, replacing (doom/backward-to-bol-or-indent &optional POINT)

(defcustom eyebrowse-keymap-prefix (kbd "C-a")
  "Prefix key for key-bindings."
  :type 'string
  :group 'eyebrowse)
(undefine-key! "C-a")

;; Enabling Company defaults
(setq company-idle-delay 0.1
      company-minimum-prefix-length 2)

;; Emacs start in fullscreen mode
(add-to-list 'default-frame-alist '(fullscreen . maximized))

;; This should prevent new workspaces from being opened up with every new emacsclient connection
(after! persp-mode
  (setq persp-emacsclient-init-frame-behaviour-override "main"))


;; For org linking
(setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)




;; Simple function to create project eshell if it exists, else switch to it
(defun switch-to-project-eshell-else-create ()
  (interactive)
  (let ((eshellBuffer (concat "*eshell " (projectile-project-name) "*")))
     (if (get-buffer-window eshellBuffer 'visible)
        (if (string= (buffer-name) eshellBuffer)
            (print '"already in eshell buffer")
          (switch-to-buffer-other-frame eshellBuffer))
        (progn (split-window)
               (command-execute 'projectile-run-eshell)
               (evil-window-move-very-bottom)
               (evil-window-set-height 10)
               ))))











;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name ""
      user-mail-address "")


;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important one:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:

;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-vibrant)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
;(setq display-line-numbers-type t)
(setq display-line-numbers-type 'nil)


;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
